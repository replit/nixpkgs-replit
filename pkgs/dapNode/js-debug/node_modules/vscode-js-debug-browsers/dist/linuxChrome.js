"use strict";
/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinuxChromeBrowserFinder = void 0;
const path_1 = require("path");
const util_1 = require("./util");
const child_process_1 = require("child_process");
const os_1 = require("os");
const newLineRegex = /\r?\n/;
/**
 * Finds the Chrome browser on Windows.
 */
class LinuxChromeBrowserFinder {
    constructor(env, fs) {
        this.env = env;
        this.fs = fs;
    }
    async findWhere(predicate) {
        return (await this.findAll()).find(predicate);
    }
    async findAll() {
        const installations = new Set();
        // 1. Look into CHROME_PATH env variable
        const customChromePath = await util_1.preferredChromePath(this.fs, this.env);
        if (customChromePath) {
            installations.add(customChromePath);
        }
        // 2. Look into the directories where .desktop are saved on gnome based distro's
        const desktopInstallationFolders = [
            path_1.posix.join(os_1.homedir(), '.local/share/applications/'),
            '/usr/share/applications/',
            '/usr/bin',
        ];
        desktopInstallationFolders.forEach(folder => {
            for (const bin in this.findChromeExecutables(folder)) {
                installations.add(bin);
            }
        });
        // 3. Look for google-chrome & chromium executables by using the which command
        const executables = [
            'google-chrome-unstable',
            'google-chrome-stable',
            'google-chrome',
            'chromium-browser',
            'chromium',
        ];
        await Promise.all(executables.map(async (executable) => {
            try {
                const chromePath = child_process_1.execFileSync('which', [executable], { stdio: 'pipe' })
                    .toString()
                    .split(newLineRegex)[0];
                if (await util_1.canAccess(this.fs, chromePath)) {
                    installations.add(chromePath);
                }
            }
            catch (e) {
                // Not installed.
            }
        }));
        if (!installations.size) {
            throw new Error('The environment variable CHROME_PATH must be set to executable of a build of Chromium version 54.0 or later.');
        }
        const priorities = [
            { regex: /chrome-wrapper$/, weight: 52, quality: "custom" /* Custom */ },
            { regex: /google-chrome-unstable$/, weight: 51, quality: "canary" /* Canary */ },
            { regex: /google-chrome-stable$/, weight: 50, quality: "stable" /* Stable */ },
            { regex: /google-chrome$/, weight: 49, quality: "stable" /* Stable */ },
            { regex: /chromium-browser$/, weight: 48, quality: "custom" /* Custom */ },
            { regex: /chromium$/, weight: 47, quality: "custom" /* Custom */ },
        ];
        if (this.env.CHROME_PATH) {
            priorities.unshift({
                regex: new RegExp(util_1.escapeRegexSpecialChars(this.env.CHROME_PATH)),
                weight: 101,
                quality: "custom" /* Custom */,
            });
        }
        return util_1.sort(installations, priorities);
    }
    findChromeExecutables(folder) {
        const argumentsRegex = /(^[^ ]+).*/; // Take everything up to the first space
        const chromeExecRegex = '^Exec=/.*/(google-chrome|chrome|chromium)-.*';
        const installations = [];
        if (util_1.canAccess(this.fs, folder)) {
            // Output of the grep & print looks like:
            //    /opt/google/chrome/google-chrome --profile-directory
            //    /home/user/Downloads/chrome-linux/chrome-wrapper %U
            // Some systems do not support grep -R so fallback to -r.
            // See https://github.com/GoogleChrome/chrome-launcher/issues/46 for more context.
            let execResult;
            try {
                execResult = child_process_1.execSync(`grep -ER "${chromeExecRegex}" ${folder} | awk -F '=' '{print $2}'`);
            }
            catch (e) {
                execResult = child_process_1.execSync(`grep -Er "${chromeExecRegex}" ${folder} | awk -F '=' '{print $2}'`);
            }
            const execPaths = execResult
                .toString()
                .split(newLineRegex)
                .map(execPath => execPath.replace(argumentsRegex, '$1'));
            execPaths.forEach(execPath => util_1.canAccess(this.fs, execPath) && installations.push(execPath));
        }
        return installations;
    }
}
exports.LinuxChromeBrowserFinder = LinuxChromeBrowserFinder;
//# sourceMappingURL=linuxChrome.js.map