"use strict";
/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeSourcePathResolver = void 0;
const path = __importStar(require("path"));
const url_1 = require("url");
const pathUtils_1 = require("../../common/pathUtils");
const sourceMapResolutionUtils_1 = require("../../common/sourceMaps/sourceMapResolutionUtils");
const urlUtils = __importStar(require("../../common/urlUtils"));
const sourcePathResolver_1 = require("../sourcePathResolver");
const localNodeInternalsPrefix = 'node:';
class NodeSourcePathResolver extends sourcePathResolver_1.SourcePathResolverBase {
    constructor(fsUtils, linkedBp, options, logger) {
        super(options, logger);
        this.fsUtils = fsUtils;
        this.linkedBp = linkedBp;
        this.options = options;
        this.logger = logger;
    }
    static shouldWarnAboutSymlinks(config) {
        var _a;
        return 'runtimeArgs' in config && !((_a = config.runtimeArgs) === null || _a === void 0 ? void 0 : _a.includes('--preserve-symlinks'));
    }
    static getOptions(c) {
        return {
            resolveSourceMapLocations: c.resolveSourceMapLocations,
            basePath: c.cwd,
            sourceMapOverrides: c.sourceMapPathOverrides,
            remoteRoot: c.remoteRoot,
            localRoot: c.localRoot,
        };
    }
    /**
     * Creates a new resolver by apply the options change to the current resolver.
     */
    derive(newOptions) {
        return new NodeSourcePathResolver(this.fsUtils, this.linkedBp, Object.assign(Object.assign({}, this.options), newOptions), this.logger);
    }
    get resolutionOptions() {
        return this.options;
    }
    /**
     * @override
     */
    async urlToAbsolutePath({ url, map }) {
        var _a;
        // replace any query string, which can be generated by webpack bundles
        url = url.replace(/\?.+/, '');
        // Allow debugging of externally loaded Node internals
        // [ by building Node with ./configure --node-builtin-modules-path $(pwd) ]
        if (url.startsWith(localNodeInternalsPrefix) && this.options.basePath) {
            url = path.join(this.options.basePath, 'lib', url.slice(localNodeInternalsPrefix.length));
            if (!url.endsWith('.js')) {
                url += '.js';
            }
            return url;
        }
        if (map) {
            return this.sourceMapSourceToAbsolute(url, map);
        }
        const absolutePath = urlUtils.fileUrlToAbsolutePath(url);
        if (absolutePath) {
            return this.rebaseRemoteToLocal(absolutePath);
        }
        // It's possible the source might be an HTTP if using the `sourceURL`
        // attribute. If this is the case, apply a source map override if it
        // applies, otherwise just assume it's relative to the basePath.
        if (urlUtils.isValidUrl(url)) {
            const mapped = this.sourceMapOverrides.apply(url);
            url = mapped === url ? new url_1.URL(url).pathname.slice(1) : mapped;
        }
        // Node internals are given us us as relative path, for example
        // require('cluster') will import a file simply named "cluster". For these
        // paths, prefix them as internal.
        else if (!path.isAbsolute(url)) {
            return `<node_internals>/${url}`;
        }
        // Otherwise, use default overrides.
        else {
            url = this.sourceMapOverrides.apply(url);
        }
        const withBase = pathUtils_1.properResolve((_a = this.options.basePath) !== null && _a !== void 0 ? _a : '', url);
        return this.rebaseRemoteToLocal(withBase);
    }
    /**
     * @override
     */
    absolutePathToUrl(absolutePath) {
        return urlUtils.absolutePathToFileUrl(this.rebaseLocalToRemote(path.normalize(absolutePath)));
    }
    /**
     * @override
     */
    async absolutePathToUrlRegexp(absolutePath) {
        var _a;
        let realPath = absolutePath;
        try {
            realPath = await this.fsUtils.realPath(absolutePath);
        }
        catch (_b) {
            // ignored
        }
        if (urlUtils.comparePathsWithoutCasing(realPath, absolutePath)) {
            return super.absolutePathToUrlRegexp(absolutePath);
        }
        (_a = this.linkedBp) === null || _a === void 0 ? void 0 : _a.warn();
        return (urlUtils.urlToRegex(this.absolutePathToUrl(absolutePath)) +
            '|' +
            urlUtils.urlToRegex(this.absolutePathToUrl(realPath)));
    }
    async sourceMapSourceToAbsolute(url, map) {
        if (!this.shouldResolveSourceMap(map.metadata)) {
            return undefined;
        }
        const fullSourceEntry = sourceMapResolutionUtils_1.getFullSourceEntry(map.sourceRoot, url);
        const mappedFullSourceEntry = this.sourceMapOverrides.apply(fullSourceEntry);
        if (mappedFullSourceEntry !== fullSourceEntry) {
            return pathUtils_1.fixDriveLetterAndSlashes(mappedFullSourceEntry);
        }
        if (urlUtils.isFileUrl(url)) {
            return urlUtils.fileUrlToAbsolutePath(url);
        }
        if (!path.isAbsolute(url) && this.options.basePath) {
            url = pathUtils_1.properResolve(await sourceMapResolutionUtils_1.getComputedSourceRoot(this.options.remoteRoot && urlUtils.isAbsolute(map.sourceRoot)
                ? this.rebaseRemoteToLocal(map.sourceRoot) || map.sourceRoot
                : map.sourceRoot, map.metadata.compiledPath, { '/': this.options.basePath }, sourceMapResolutionUtils_1.moduleAwarePathMappingResolver(this.fsUtils, map.metadata.compiledPath), this.logger), url);
        }
        return this.rebaseRemoteToLocal(url) || url;
    }
}
exports.NodeSourcePathResolver = NodeSourcePathResolver;
//# sourceMappingURL=nodeSourcePathResolver.js.map
//# sourceMappingURL=nodeSourcePathResolver.js.map
